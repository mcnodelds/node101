<% layout('layouts/base', { title: "кошик з їжею <3", hideHeader: true }) %>

<div class="max-w-3xl mx-auto p-4 min-h-screen" x-data="cart">
    <h1 class="text-2xl font-bold mb-4 text-center">Кошик</h1>
    <div class="space-y-4">
        <template x-if="loading">
            <p class="text-gray-500">Завантаження кошика...</p> </template>
        <template x-if="!loading && cart.size === 0">
            <p class="text-gray-500">Кошик порожній</p>
        </template>
        <template x-for="item in Array.from(cart.entries())" :key="item[0]">
            <div class="card bg-base-100 shadow-xl border p-4">
                <div class="flex justify-between items-center">
                    <div class="flex items-center">
                        <img 
                            :src="dishes[item[0]]?.imageurl || 'https://via.placeholder.com/64'" 
                            class="w-16 h-16 object-cover rounded-lg mr-4" 
                            :alt="dishes[item[0]]?.name || 'Dish image'"
                        />
                        <div>
                            <h2 class="text-xl font-semibold" x-text="dishes[item[0]]?.name || 'Завантаження...'"></h2>
                            <p x-text="`Ціна: ${dishes[item[0]]?.price || 0}₴`"></p>
                            <div class="flex items-center mt-2">
                                <label class="mr-2">Кількість:</label>
                                <input 
                                    type="number" 
                                    min="1" 
                                    class="input input-bordered w-16 mr-4" 
                                    x-model.number="item[1]"
                                    @change="updateCart(item[0], $event.target.value)"
                                >
                                <button 
                                    class="btn btn-error" 
                                    @click="removeFromCart(item[0])"
                                >Видалити</button>
                            </div>
                        </div>
                    </div>
                    <div x-text="`Сума: ${(dishes[item[0]]?.price * item[1] || 0)}₴`"></div>
                </div>
            </div>
        </template>
    </div>
    <template x-if="cart.size > 0">
        <div class="text-right mt-4">
            <p class="text-lg font-semibold">Загальна сума: <span x-text="total + '₴'"></span></p>
            <a href="/cart/checkout" class="btn btn-primary mt-2">Оформити замовлення</a>
        </div>
    </template>
</div>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('cart', () => ({
            cart: new Map(),
            dishes: {},
            loading: true,
            async init() {
                const storedCart = JSON.parse(localStorage.getItem('cart')) || {};
                this.cart = new Map(Object.entries(storedCart).map(([id, qty]) => [id, parseInt(qty)]));
                await this.loadDishes();
                this.loading = false;
            },
            async loadDishes() {
                try {
                    const response = await fetch('/api/menu');
                    if (!response.ok) throw new Error('Failed to fetch menu');
                    const menu = await response.json();
                    this.dishes = menu.reduce((acc, dish) => {
                        acc[dish.id] = dish;
                        return acc;
                    }, {});
                } catch (error) {
                    console.error('Error loading dishes:', error);
                }
            },
            get total() {
                let sum = 0;
                for (const [id, quantity] of this.cart) {
                    sum += (this.dishes[id]?.price || 0) * quantity;
                }
                return sum;
            },
            updateCart(id, quantity) {
                if (quantity < 1) quantity = 1;
                this.cart.set(id, parseInt(quantity));
                // Save cart as JSON object to localStorage
                localStorage.setItem('cart', JSON.stringify(Object.fromEntries(this.cart)));
                this.$dispatch('cart-updated');
            },
            removeFromCart(id) {
                this.cart.delete(id);
                // Save cart as JSON object to localStorage
                localStorage.setItem('cart', JSON.stringify(Object.fromEntries(this.cart)));
                this.$dispatch('cart-updated');
            }
        }));
    });
</script>
